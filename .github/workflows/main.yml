# LinHT Docker Image Build & Release Template
# This workflow builds multi-architecture Docker images and attaches them to GitHub releases
# Supports both x64 (amd64) and ARM64 architectures with native ARM runners for optimal performance

name: Build & Release LinHT Docker Images

# Trigger only on published releases to avoid unnecessary builds
on:
  release:
    types: [published]

# Global environment variables
env:
  REGISTRY: ghcr.io                    # GitHub Container Registry

jobs:
  # Build and push Docker images for multiple architectures
  build-and-push:
    strategy:
      matrix:
        include:
          # x64/AMD64 build on standard Ubuntu runner
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
          # ARM64 build on native ARM runner for faster compilation
          - platform: linux/arm64
            runner: ubuntu-24.04-arm  # Note: use 'arm' not 'arm64' for runner label
            arch: arm64

    runs-on: ${{ matrix.runner }}

    steps:
      # Free up space in the ubuntu image - otherwise the arm64 runner runs out of memory soon!
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
          
      # Check out the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Extract and normalize repository metadata
      - name: Extract metadata
        id: meta
        run: |
          # Convert repository name to lowercase for Docker registry compatibility
          echo "image-name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      # Set up Docker Buildx for advanced build features and caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate with GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image for current architecture
      - name: Build and push LinHT ${{ matrix.arch }} image
        uses: docker/build-push-action@v6
        with:
          context: .                                    # Build from repository root
          platforms: ${{ matrix.platform }}            # Target specific architecture
          push: true                                    # Push to registry immediately
          tags: ${{ env.REGISTRY }}/${{ steps.meta.outputs.image-name }}:${{ steps.meta.outputs.tag }}-${{ matrix.arch }}
          # GitHub Actions cache for faster subsequent builds
          cache-from: type=gha,scope=linht-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=linht-${{ matrix.arch }}

      # Export the built image as a tar file for release attachment
      - name: Export LinHT ${{ matrix.arch }} image
        run: |
          # Pull the image we just pushed
          docker pull ${{ env.REGISTRY }}/${{ steps.meta.outputs.image-name }}:${{ steps.meta.outputs.tag }}-${{ matrix.arch }}
          # Save it as a tar file for offline distribution
          docker save ${{ env.REGISTRY }}/${{ steps.meta.outputs.image-name }}:${{ steps.meta.outputs.tag }}-${{ matrix.arch }} -o linht-${{ matrix.arch }}.tar

      # Upload the tar file as a workflow artifact (temporary storage)
      - name: Upload LinHT ${{ matrix.arch }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: linht-docker-${{ matrix.arch }}         # Unique name per architecture
          path: linht-${{ matrix.arch }}.tar            # The exported tar file
          retention-days: 1                             # Keep for 1 day only (just for release)

  # Attach the Docker image tar files to the GitHub release
  upload-release-assets:
    needs: build-and-push                               # Wait for all builds to complete
    runs-on: ubuntu-latest

    steps:
      # Download only the specific artifacts we need (not the Docker buildx cache artifacts)
      - name: Download LinHT AMD64 artifact
        uses: actions/download-artifact@v4
        with:
          name: linht-docker-amd64
          path: ./artifacts/

      - name: Download LinHT ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: linht-docker-arm64
          path: ./artifacts/

      # Attach the Docker image tar files to the GitHub release
      - name: Upload LinHT release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./artifacts/linht-amd64.tar
            ./artifacts/linht-arm64.tar
